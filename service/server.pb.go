// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	Tag
	SearchRequest
	SearchResponse
	ShutdownRequest
	ShutdownResponse
	VersionRequest
	VersionResponse
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Tag struct {
	Tag string `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Tag) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

// Search request
type SearchRequest struct {
	// The source to filter the results to.
	Source string `protobuf:"bytes,2,opt,name=Source" json:"Source,omitempty"`
	// Tags to apply to the query
	Tags []*Tag `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SearchRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *SearchRequest) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

// The response message containing the greetings
// article summary including media links for the audio.
// Represents an item from the API. An item is a single result record that contains all the components of the
type SearchResponse struct {
	Title   string `protobuf:"bytes,1,opt,name=Title" json:"Title,omitempty"`
	Summary string `protobuf:"bytes,2,opt,name=Summary" json:"Summary,omitempty"`
	// Don't know what this is for.
	DateURL         string  `protobuf:"bytes,3,opt,name=DateURL" json:"DateURL,omitempty"`
	AudioURL        string  `protobuf:"bytes,4,opt,name=AudioURL" json:"AudioURL,omitempty"`
	ImageURL        string  `protobuf:"bytes,5,opt,name=ImageURL" json:"ImageURL,omitempty"`
	ArticleURL      string  `protobuf:"bytes,6,opt,name=ArticleURL" json:"ArticleURL,omitempty"`
	Duration        float32 `protobuf:"fixed32,7,opt,name=Duration" json:"Duration,omitempty"`
	FileSizeInBytes uint64  `protobuf:"varint,8,opt,name=FileSizeInBytes" json:"FileSizeInBytes,omitempty"`
	NumPlays        uint32  `protobuf:"varint,9,opt,name=NumPlays" json:"NumPlays,omitempty"`
	SourceID        string  `protobuf:"bytes,10,opt,name=SourceID" json:"SourceID,omitempty"`
	GUID            string  `protobuf:"bytes,11,opt,name=GUID" json:"GUID,omitempty"`
	PublishedAt     string  `protobuf:"bytes,12,opt,name=PublishedAt" json:"PublishedAt,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SearchResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SearchResponse) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *SearchResponse) GetDateURL() string {
	if m != nil {
		return m.DateURL
	}
	return ""
}

func (m *SearchResponse) GetAudioURL() string {
	if m != nil {
		return m.AudioURL
	}
	return ""
}

func (m *SearchResponse) GetImageURL() string {
	if m != nil {
		return m.ImageURL
	}
	return ""
}

func (m *SearchResponse) GetArticleURL() string {
	if m != nil {
		return m.ArticleURL
	}
	return ""
}

func (m *SearchResponse) GetDuration() float32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *SearchResponse) GetFileSizeInBytes() uint64 {
	if m != nil {
		return m.FileSizeInBytes
	}
	return 0
}

func (m *SearchResponse) GetNumPlays() uint32 {
	if m != nil {
		return m.NumPlays
	}
	return 0
}

func (m *SearchResponse) GetSourceID() string {
	if m != nil {
		return m.SourceID
	}
	return ""
}

func (m *SearchResponse) GetGUID() string {
	if m != nil {
		return m.GUID
	}
	return ""
}

func (m *SearchResponse) GetPublishedAt() string {
	if m != nil {
		return m.PublishedAt
	}
	return ""
}

// The request for a system shutdown
type ShutdownRequest struct {
	// If true will force the service to shutdown forcing all connections to drop.
	Force bool `protobuf:"varint,1,opt,name=force" json:"force,omitempty"`
}

func (m *ShutdownRequest) Reset()                    { *m = ShutdownRequest{} }
func (m *ShutdownRequest) String() string            { return proto.CompactTextString(m) }
func (*ShutdownRequest) ProtoMessage()               {}
func (*ShutdownRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ShutdownRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

// The response after request to shutdown
type ShutdownResponse struct {
}

func (m *ShutdownResponse) Reset()                    { *m = ShutdownResponse{} }
func (m *ShutdownResponse) String() string            { return proto.CompactTextString(m) }
func (*ShutdownResponse) ProtoMessage()               {}
func (*ShutdownResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// VersionRequest requests the build version of the service.
type VersionRequest struct {
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// VersionResponse includes the binary build version and the used dependencies and their versions.
type VersionResponse struct {
	Version      string   `protobuf:"bytes,1,opt,name=Version" json:"Version,omitempty"`
	Dependencies []string `protobuf:"bytes,2,rep,name=Dependencies" json:"Dependencies,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VersionResponse) GetDependencies() []string {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func init() {
	proto.RegisterType((*Tag)(nil), "service.Tag")
	proto.RegisterType((*SearchRequest)(nil), "service.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "service.SearchResponse")
	proto.RegisterType((*ShutdownRequest)(nil), "service.ShutdownRequest")
	proto.RegisterType((*ShutdownResponse)(nil), "service.ShutdownResponse")
	proto.RegisterType((*VersionRequest)(nil), "service.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "service.VersionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Audify service

type AudifyClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (Audify_SearchClient, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type audifyClient struct {
	cc *grpc.ClientConn
}

func NewAudifyClient(cc *grpc.ClientConn) AudifyClient {
	return &audifyClient{cc}
}

func (c *audifyClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (Audify_SearchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Audify_serviceDesc.Streams[0], c.cc, "/service.Audify/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &audifySearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Audify_SearchClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type audifySearchClient struct {
	grpc.ClientStream
}

func (x *audifySearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *audifyClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := grpc.Invoke(ctx, "/service.Audify/Shutdown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audifyClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/service.Audify/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Audify service

type AudifyServer interface {
	Search(*SearchRequest, Audify_SearchServer) error
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
}

func RegisterAudifyServer(s *grpc.Server, srv AudifyServer) {
	s.RegisterService(&_Audify_serviceDesc, srv)
}

func _Audify_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AudifyServer).Search(m, &audifySearchServer{stream})
}

type Audify_SearchServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type audifySearchServer struct {
	grpc.ServerStream
}

func (x *audifySearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Audify_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudifyServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Audify/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudifyServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Audify_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudifyServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Audify/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudifyServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Audify_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Audify",
	HandlerType: (*AudifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Shutdown",
			Handler:    _Audify_Shutdown_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Audify_Version_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _Audify_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x49, 0xd3, 0xed, 0x9f, 0x69, 0x77, 0x5b, 0x59, 0xab, 0x5d, 0xd3, 0x03, 0x8a, 0xc2,
	0x81, 0x9c, 0x22, 0xb4, 0x70, 0x05, 0xa9, 0x55, 0x05, 0xaa, 0x84, 0xa0, 0x4a, 0xbb, 0xdc, 0xdd,
	0x64, 0x36, 0xb1, 0x94, 0xc6, 0x25, 0x76, 0x58, 0x95, 0x47, 0xe4, 0x41, 0x78, 0x0e, 0x64, 0x27,
	0x4e, 0xb7, 0x2c, 0x37, 0x7f, 0xdf, 0xcf, 0x33, 0xf6, 0x78, 0xc6, 0x30, 0x96, 0x58, 0xfe, 0xc4,
	0x32, 0x3c, 0x94, 0x42, 0x09, 0xd2, 0xd7, 0x8a, 0xc7, 0xe8, 0xdf, 0x82, 0xbb, 0x65, 0x29, 0x99,
	0x82, 0xab, 0x58, 0x4a, 0x1d, 0xcf, 0x09, 0x86, 0x91, 0x5e, 0xfa, 0x2b, 0xb8, 0xdc, 0x20, 0x2b,
	0xe3, 0x2c, 0xc2, 0x1f, 0x15, 0x4a, 0x45, 0x6e, 0xa0, 0xb7, 0x11, 0x55, 0x19, 0x23, 0xed, 0x98,
	0x5d, 0x8d, 0x22, 0x1e, 0x74, 0x15, 0x4b, 0x25, 0x75, 0x3d, 0x37, 0x18, 0xdd, 0x8d, 0xc3, 0x26,
	0x73, 0xb8, 0x65, 0x69, 0x64, 0x88, 0xff, 0xa7, 0x03, 0x57, 0x36, 0x97, 0x3c, 0x88, 0x42, 0x22,
	0xb9, 0x86, 0x8b, 0x2d, 0x57, 0x39, 0x36, 0x27, 0xd6, 0x82, 0x50, 0xe8, 0x6f, 0xaa, 0xfd, 0x9e,
	0x95, 0xc7, 0xe6, 0x0c, 0x2b, 0x35, 0x59, 0x32, 0x85, 0xf7, 0xd1, 0x17, 0xea, 0xd6, 0xa4, 0x91,
	0x64, 0x06, 0x83, 0x79, 0x95, 0x70, 0xa1, 0x51, 0xd7, 0xa0, 0x56, 0x6b, 0xb6, 0xda, 0xb3, 0xd4,
	0x84, 0x5d, 0xd4, 0xcc, 0x6a, 0xf2, 0x0a, 0x60, 0x5e, 0x2a, 0x1e, 0xe7, 0x86, 0xf6, 0x0c, 0x7d,
	0xe2, 0xe8, 0xd8, 0x65, 0x55, 0x32, 0xc5, 0x45, 0x41, 0xfb, 0x9e, 0x13, 0x74, 0xa2, 0x56, 0x93,
	0x00, 0x26, 0x9f, 0x78, 0x8e, 0x1b, 0xfe, 0x0b, 0x57, 0xc5, 0xe2, 0xa8, 0x50, 0xd2, 0x81, 0xe7,
	0x04, 0xdd, 0xe8, 0x5f, 0x5b, 0x67, 0xf9, 0x5a, 0xed, 0xd7, 0x39, 0x3b, 0x4a, 0x3a, 0xf4, 0x9c,
	0xe0, 0x32, 0x6a, 0xb5, 0x66, 0xf5, 0x13, 0xae, 0x96, 0x14, 0xea, 0xdb, 0x59, 0x4d, 0x08, 0x74,
	0x3f, 0xdf, 0xaf, 0x96, 0x74, 0x64, 0x7c, 0xb3, 0x26, 0x1e, 0x8c, 0xd6, 0xd5, 0x2e, 0xe7, 0x32,
	0xc3, 0x64, 0xae, 0xe8, 0xd8, 0xa0, 0xa7, 0x96, 0xff, 0x06, 0x26, 0x9b, 0xac, 0x52, 0x89, 0x78,
	0x2c, 0x6c, 0xd7, 0xae, 0xe1, 0xe2, 0x41, 0xe8, 0xa6, 0xe9, 0x87, 0x1e, 0x44, 0xb5, 0xf0, 0x09,
	0x4c, 0x4f, 0x1b, 0xeb, 0x96, 0xf8, 0x53, 0xb8, 0xfa, 0x8e, 0xa5, 0xe4, 0xc2, 0xc6, 0xfa, 0xdf,
	0x60, 0xd2, 0x3a, 0x4d, 0xdf, 0x28, 0xf4, 0x1b, 0xab, 0xe9, 0x9c, 0x95, 0xc4, 0x87, 0xf1, 0x12,
	0x0f, 0x58, 0x24, 0x58, 0xc4, 0x1c, 0x25, 0xed, 0x78, 0x6e, 0x30, 0x8c, 0xce, 0xbc, 0xbb, 0xdf,
	0x0e, 0xf4, 0x74, 0x73, 0x1e, 0x8e, 0xe4, 0x03, 0xf4, 0xea, 0x91, 0x20, 0x37, 0xed, 0xc4, 0x9c,
	0xcd, 0xdb, 0xec, 0xf6, 0x99, 0xdf, 0x5c, 0xf4, 0xc5, 0x5b, 0x87, 0xcc, 0x61, 0x60, 0x0b, 0x20,
	0xf4, 0xb4, 0xf1, 0xbc, 0xf8, 0xd9, 0xcb, 0xff, 0x10, 0x9b, 0x84, 0x7c, 0x6c, 0x4b, 0x21, 0xa7,
	0xa3, 0xce, 0x5f, 0x60, 0x46, 0x9f, 0x03, 0x1b, 0xbf, 0x78, 0x0f, 0xaf, 0x63, 0xb1, 0x0f, 0x53,
	0xae, 0xb2, 0x6a, 0x17, 0xaa, 0x0c, 0x65, 0xc6, 0x12, 0xf1, 0x18, 0xee, 0x84, 0xca, 0x59, 0x91,
	0x84, 0xcc, 0x14, 0xba, 0x18, 0xd5, 0x05, 0xaf, 0xf5, 0xb7, 0x5b, 0x3b, 0xbb, 0x9e, 0xf9, 0x7f,
	0xef, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x02, 0xe1, 0x57, 0x8f, 0x03, 0x00, 0x00,
}
